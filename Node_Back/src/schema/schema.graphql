scalar Date

"Interfaces"
interface Empleado {
	idUsuario: String
	nombre: String
	apellidos: String
	password: String
	genero: Int
	correo: String
}
directive @rateLimit(
	message: String
	identityArgs: [String]
	arrayLengthField: String
	max: Int
	window: String
) on FIELD_DEFINITION

"Objetos"
type Tanque {
	"Identificador del Tanque"
	idTanque: String!
	"Calidad del Tanque"
	calidad: String
	"Comentario del estado de la valvula"
	estadoValvula: String
	"Peso Actual del tanque"
	pesoActual: Float
	"Peso normal del tanque"
	peso: Float
	"Fecha esperada para el regreso del tanque"
	fechaEsperadaRegreso: Date
	"ID de la etiqueta asignada al tanque"
	idEtiqueta: EtiquetaRFID
	"Información del dueno"
	dueno: Owner
	"Contenido actual del tanque"
	contenidoTanque: Contenido
	"Lugar del tanque"
	lugar: Lugar
	"Historial del tanque"
	haEstado: [HistorialTanque]
	"operaciones"
	operaciones: [Operacion]
	"mantenimientos"
	mantenimientos : [Mantenimiento]
	"Observaciones"
	observaciones : String
	"Fecha de llegada"
	fechaIngreso : Date
}
type Owner {
	idDueno: String!
	nombre: String!
}
type Mantenimiento {
	tanque : Tanque!
	fechaMantenimiento : Date
	observaciones : String
}

type EtiquetaRFID {
	idEtiqueta: String!
}

type Contenido {
	idContenido: String!
	contenido: String!
	tanques : [Tanque]
}
"Lugar de donde se pueden ubicar los tanques"
type Lugar {
	"Identificador del Lugar"
	idLugar: String!
	"Nombre del lugar"
	lnombre: String!
	"Radio del lugar"
	radio: Float
	"Capacidad maxima de ese lugar para guardar tanques"
	capacidadMaxima: Int
	"Coordenas del lugar, se descomponen en x y y"
	coordenadas: Point
	"Tanques en un lugar"
	tanques: [Tanque]
	"Fecha"
	fecha: Date
}
"Coordenadas"
type Point {
	x: Float
	y: Float
}

type Usuario implements Empleado {
	idUsuario: String
	nombre: String
	apellidos: String
	password: String
	genero: Int
	correo: String
}

type Operador implements Empleado {
	idUsuario: String!
	nombre: String
	apellidos: String
	password: String
	genero: Int
	correo: String
	supervisor: Usuario
}

type Operacion {
	operador: Usuario
	tanque: Tanque
	fecha: Date
}
"Historial de ubicación de tanques"
type HistorialTanque {
	lugar: Lugar
	fecha: Date
	idTanque: ID
}

"Historial de peso de tanques"
type HistorialPeso {
	peso: Float
	fecha: Date
	idTanque: ID
}

"Input para crear o actualizar tanque"
input TanqueInput {
	id: String
	calidad: String
	estadoValvula: String
	pesoActual: Float
	peso: Float
	fechaEsperadaRetorno: Date
	idEtiqueta: Int
	idContenido: String
	idDueno: String
}

"Input para crear o actualizar un lugar"
input LugarInput {
	id: String
	lnombre: String
	radio: Float
	capacidadMaxima: Int
	coordenadas: PointInput
}

"Input para crear o modificar las coordenadas de un lugar"
input PointInput {
	x: Float
	y: Float
}

"Input para crear o actualizar un contenido"
input ContenidoInput {
	id: String
	contenido: String
}

"Input para crear o actualizar un dueno"
input DuenoInput {
	id: String
	nombre: String
}

"Input para crear o acutalizar un mantenimiento"
input MantenimientoInput {
	id: IdMantenimientoInput
	observaciones: String
}

"Id para un mantenimiento"
input IdMantenimientoInput {
	idTanque: String
	fechaMantenimiento: Date
}

"Queries"
type Query {
	"Lista de informacion de los Tanques"
	# Limited to 10 requests every 60 seconds
	tanques: [Tanque]
		@rateLimit(
			window: "60s"
			max: 10
			message: "You are doing that too often. Please wait 60 seconds before trying again."
		)
	"Información del tanque seleccionado por id"
	tanque(idTanque: ID!): Tanque!
	"Información de los lugares registrados"
	lugares: [Lugar]
	"Información de un lugar seleccionado por id"
	lugar(idLugar: ID!): Lugar!
	"Lista de información de usuarios"
	usuarios: [Usuario!]
	"Informacion de un usuario seleccionado por id"
	usuario(idUsuario: ID!): Usuario!
	"Lista de información de contenido"
	contenidos: [Contenido!]
	"Información de un contenido por id"
	contenido(idContenido: ID!): Contenido!
	"Lista de dueños"
	owners: [Owner!]
	"Información de un dueño por id"
	owner(idOwner: ID!): Owner
	"Lista de etiquetas RFID"
	etiquetas: [EtiquetaRFID]
	"Información de una etiqueta por ID"
	etiqueta(idEtiqueta: ID!): EtiquetaRFID
	"Lista de historial de peso"
	historialPesoTanques: [HistorialPeso!]
	"Información de peso de tanques"
	historialPesoTanque(idTanque: ID!): HistorialPeso!
	"Informacion de los mantenimientos de tanques"
	historialMantenimientos : [Mantenimiento!]
	"Información del mantenimiento de un tanque"
	historialMantenimientoTanque(idTanque: ID!) : [Mantenimiento!]
	"Operaciones tanques"
	operaciones : [Operacion!]
	"Operacion de un tanque"
	operacionesTanque(idTanque : ID!) : [Operacion!]
	"Operadores" 
	operadores : [Operador]
}

type Mutation {
	"""
	Mutación para modificar la información de un tanque.
	TanqueInput es la nueva información del tanque.
	idTanqueOriginal es el idTanque original en caso de que se quiera asignar un nuevo id al tanque.
	"""
	setTanque(tanqueInput: TanqueInput!, idTanqueOriginal: String!): String
	"Mutación para crear un nuevo tanque"
	createTanque(tanqueInput: TanqueInput!): String
	"Mutación para eliminar un tanque cuyo ID no es llave foránea de ninguna otra tabla"
	deleteTanque(idTanqueInput: String!): String

	"""
	Mutación para modificar la información de un lugar.
	LugarInput es la nueva información del lugar.
	idLugarOriginal es el idLugar original en caso de que se quiera asignar un nuevo id al lugar.
	"""
	setLugar(lugarInput: LugarInput!, idLugarOriginal: String!): String
	"Mutación para crear un nuevo lugar"
	createLugar(lugarInput: LugarInput!): String

	"""
	Mutación para modificar la información de un contenido.
	ContenidoInput es la nueva información del contenido.
	idContenidoOriginal es el idContenido original en caso de que se quiera asignar un nuevo id al contenido.
	"""
	setContenido(
		contenidoInput: ContenidoInput!
		idContenidoOriginal: String!
	): String
	"Mutación para crear un nuevo contenido"
	createContenido(contenidoInput: ContenidoInput!): String

	"""
	Mutación para modificar la información de un dueno.
	DuenoInput es la nueva información del dueno.
	idDuenoOriginal es el idDueno original en caso de que se quiera asignar un nuevo id al dueno.
	"""
	setDueno(duenoInput: DuenoInput!, idDuenoOriginal: String!): String
	"Mutación para crear un nuevo dueno"
	createDueno(duenoInput: DuenoInput!): String

	"""
	Mutación para modificar la información de un mantenimiento.
	MantenimientoInput es la nueva información del mantenimiento.
	idMantenimientoOriginal son las columnas que forman la llave primaria original en caso de que se quiera asignar
	una nueva llave primaria al mantenimiento.
	"""
	setMantenimiento(
		mantenimientoInput: MantenimientoInput!
		idMantenimientoOriginal: IdMantenimientoInput!
	): String
	"Mutación para crear un nuevo mantenimiento"
	createMantenimiento(mantenimientoInput: MantenimientoInput!): String
}
